/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.davtor.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Customer extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -7454741407269376693L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Customer\",\"namespace\":\"com.davtor.avro\",\"fields\":[{\"name\":\"customerId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"This element is the customer id\",\"default\":null},{\"name\":\"name\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"This element is the customer name\",\"default\":null},{\"name\":\"lastName\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"This element is the customer last name\",\"default\":null},{\"name\":\"birthDate\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"This element is the customer birthDate\",\"default\":null},{\"name\":\"weight\",\"type\":[\"null\",\"double\"],\"doc\":\"This element is the customer weight\",\"default\":null},{\"name\":\"height\",\"type\":[\"null\",\"double\"],\"doc\":\"This element is the customer height\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Customer> ENCODER =
      new BinaryMessageEncoder<Customer>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Customer> DECODER =
      new BinaryMessageDecoder<Customer>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Customer> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Customer> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Customer> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Customer>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Customer to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Customer from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Customer instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Customer fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** This element is the customer id */
   private java.lang.String customerId;
  /** This element is the customer name */
   private java.lang.String name;
  /** This element is the customer last name */
   private java.lang.String lastName;
  /** This element is the customer birthDate */
   private java.lang.String birthDate;
  /** This element is the customer weight */
   private java.lang.Double weight;
  /** This element is the customer height */
   private java.lang.Double height;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Customer() {}

  /**
   * All-args constructor.
   * @param customerId This element is the customer id
   * @param name This element is the customer name
   * @param lastName This element is the customer last name
   * @param birthDate This element is the customer birthDate
   * @param weight This element is the customer weight
   * @param height This element is the customer height
   */
  public Customer(java.lang.String customerId, java.lang.String name, java.lang.String lastName, java.lang.String birthDate, java.lang.Double weight, java.lang.Double height) {
    this.customerId = customerId;
    this.name = name;
    this.lastName = lastName;
    this.birthDate = birthDate;
    this.weight = weight;
    this.height = height;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return customerId;
    case 1: return name;
    case 2: return lastName;
    case 3: return birthDate;
    case 4: return weight;
    case 5: return height;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: customerId = value$ != null ? value$.toString() : null; break;
    case 1: name = value$ != null ? value$.toString() : null; break;
    case 2: lastName = value$ != null ? value$.toString() : null; break;
    case 3: birthDate = value$ != null ? value$.toString() : null; break;
    case 4: weight = (java.lang.Double)value$; break;
    case 5: height = (java.lang.Double)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'customerId' field.
   * @return This element is the customer id
   */
  public java.lang.String getCustomerId() {
    return customerId;
  }


  /**
   * Sets the value of the 'customerId' field.
   * This element is the customer id
   * @param value the value to set.
   */
  public void setCustomerId(java.lang.String value) {
    this.customerId = value;
  }

  /**
   * Gets the value of the 'name' field.
   * @return This element is the customer name
   */
  public java.lang.String getName() {
    return name;
  }


  /**
   * Sets the value of the 'name' field.
   * This element is the customer name
   * @param value the value to set.
   */
  public void setName(java.lang.String value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'lastName' field.
   * @return This element is the customer last name
   */
  public java.lang.String getLastName() {
    return lastName;
  }


  /**
   * Sets the value of the 'lastName' field.
   * This element is the customer last name
   * @param value the value to set.
   */
  public void setLastName(java.lang.String value) {
    this.lastName = value;
  }

  /**
   * Gets the value of the 'birthDate' field.
   * @return This element is the customer birthDate
   */
  public java.lang.String getBirthDate() {
    return birthDate;
  }


  /**
   * Sets the value of the 'birthDate' field.
   * This element is the customer birthDate
   * @param value the value to set.
   */
  public void setBirthDate(java.lang.String value) {
    this.birthDate = value;
  }

  /**
   * Gets the value of the 'weight' field.
   * @return This element is the customer weight
   */
  public java.lang.Double getWeight() {
    return weight;
  }


  /**
   * Sets the value of the 'weight' field.
   * This element is the customer weight
   * @param value the value to set.
   */
  public void setWeight(java.lang.Double value) {
    this.weight = value;
  }

  /**
   * Gets the value of the 'height' field.
   * @return This element is the customer height
   */
  public java.lang.Double getHeight() {
    return height;
  }


  /**
   * Sets the value of the 'height' field.
   * This element is the customer height
   * @param value the value to set.
   */
  public void setHeight(java.lang.Double value) {
    this.height = value;
  }

  /**
   * Creates a new Customer RecordBuilder.
   * @return A new Customer RecordBuilder
   */
  public static com.davtor.avro.Customer.Builder newBuilder() {
    return new com.davtor.avro.Customer.Builder();
  }

  /**
   * Creates a new Customer RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Customer RecordBuilder
   */
  public static com.davtor.avro.Customer.Builder newBuilder(com.davtor.avro.Customer.Builder other) {
    if (other == null) {
      return new com.davtor.avro.Customer.Builder();
    } else {
      return new com.davtor.avro.Customer.Builder(other);
    }
  }

  /**
   * Creates a new Customer RecordBuilder by copying an existing Customer instance.
   * @param other The existing instance to copy.
   * @return A new Customer RecordBuilder
   */
  public static com.davtor.avro.Customer.Builder newBuilder(com.davtor.avro.Customer other) {
    if (other == null) {
      return new com.davtor.avro.Customer.Builder();
    } else {
      return new com.davtor.avro.Customer.Builder(other);
    }
  }

  /**
   * RecordBuilder for Customer instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Customer>
    implements org.apache.avro.data.RecordBuilder<Customer> {

    /** This element is the customer id */
    private java.lang.String customerId;
    /** This element is the customer name */
    private java.lang.String name;
    /** This element is the customer last name */
    private java.lang.String lastName;
    /** This element is the customer birthDate */
    private java.lang.String birthDate;
    /** This element is the customer weight */
    private java.lang.Double weight;
    /** This element is the customer height */
    private java.lang.Double height;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.davtor.avro.Customer.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.customerId)) {
        this.customerId = data().deepCopy(fields()[0].schema(), other.customerId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.lastName)) {
        this.lastName = data().deepCopy(fields()[2].schema(), other.lastName);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.birthDate)) {
        this.birthDate = data().deepCopy(fields()[3].schema(), other.birthDate);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.weight)) {
        this.weight = data().deepCopy(fields()[4].schema(), other.weight);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.height)) {
        this.height = data().deepCopy(fields()[5].schema(), other.height);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing Customer instance
     * @param other The existing instance to copy.
     */
    private Builder(com.davtor.avro.Customer other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.customerId)) {
        this.customerId = data().deepCopy(fields()[0].schema(), other.customerId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.lastName)) {
        this.lastName = data().deepCopy(fields()[2].schema(), other.lastName);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.birthDate)) {
        this.birthDate = data().deepCopy(fields()[3].schema(), other.birthDate);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.weight)) {
        this.weight = data().deepCopy(fields()[4].schema(), other.weight);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.height)) {
        this.height = data().deepCopy(fields()[5].schema(), other.height);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'customerId' field.
      * This element is the customer id
      * @return The value.
      */
    public java.lang.String getCustomerId() {
      return customerId;
    }


    /**
      * Sets the value of the 'customerId' field.
      * This element is the customer id
      * @param value The value of 'customerId'.
      * @return This builder.
      */
    public com.davtor.avro.Customer.Builder setCustomerId(java.lang.String value) {
      validate(fields()[0], value);
      this.customerId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'customerId' field has been set.
      * This element is the customer id
      * @return True if the 'customerId' field has been set, false otherwise.
      */
    public boolean hasCustomerId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'customerId' field.
      * This element is the customer id
      * @return This builder.
      */
    public com.davtor.avro.Customer.Builder clearCustomerId() {
      customerId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'name' field.
      * This element is the customer name
      * @return The value.
      */
    public java.lang.String getName() {
      return name;
    }


    /**
      * Sets the value of the 'name' field.
      * This element is the customer name
      * @param value The value of 'name'.
      * @return This builder.
      */
    public com.davtor.avro.Customer.Builder setName(java.lang.String value) {
      validate(fields()[1], value);
      this.name = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * This element is the customer name
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'name' field.
      * This element is the customer name
      * @return This builder.
      */
    public com.davtor.avro.Customer.Builder clearName() {
      name = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'lastName' field.
      * This element is the customer last name
      * @return The value.
      */
    public java.lang.String getLastName() {
      return lastName;
    }


    /**
      * Sets the value of the 'lastName' field.
      * This element is the customer last name
      * @param value The value of 'lastName'.
      * @return This builder.
      */
    public com.davtor.avro.Customer.Builder setLastName(java.lang.String value) {
      validate(fields()[2], value);
      this.lastName = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'lastName' field has been set.
      * This element is the customer last name
      * @return True if the 'lastName' field has been set, false otherwise.
      */
    public boolean hasLastName() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'lastName' field.
      * This element is the customer last name
      * @return This builder.
      */
    public com.davtor.avro.Customer.Builder clearLastName() {
      lastName = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'birthDate' field.
      * This element is the customer birthDate
      * @return The value.
      */
    public java.lang.String getBirthDate() {
      return birthDate;
    }


    /**
      * Sets the value of the 'birthDate' field.
      * This element is the customer birthDate
      * @param value The value of 'birthDate'.
      * @return This builder.
      */
    public com.davtor.avro.Customer.Builder setBirthDate(java.lang.String value) {
      validate(fields()[3], value);
      this.birthDate = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'birthDate' field has been set.
      * This element is the customer birthDate
      * @return True if the 'birthDate' field has been set, false otherwise.
      */
    public boolean hasBirthDate() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'birthDate' field.
      * This element is the customer birthDate
      * @return This builder.
      */
    public com.davtor.avro.Customer.Builder clearBirthDate() {
      birthDate = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'weight' field.
      * This element is the customer weight
      * @return The value.
      */
    public java.lang.Double getWeight() {
      return weight;
    }


    /**
      * Sets the value of the 'weight' field.
      * This element is the customer weight
      * @param value The value of 'weight'.
      * @return This builder.
      */
    public com.davtor.avro.Customer.Builder setWeight(java.lang.Double value) {
      validate(fields()[4], value);
      this.weight = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'weight' field has been set.
      * This element is the customer weight
      * @return True if the 'weight' field has been set, false otherwise.
      */
    public boolean hasWeight() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'weight' field.
      * This element is the customer weight
      * @return This builder.
      */
    public com.davtor.avro.Customer.Builder clearWeight() {
      weight = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'height' field.
      * This element is the customer height
      * @return The value.
      */
    public java.lang.Double getHeight() {
      return height;
    }


    /**
      * Sets the value of the 'height' field.
      * This element is the customer height
      * @param value The value of 'height'.
      * @return This builder.
      */
    public com.davtor.avro.Customer.Builder setHeight(java.lang.Double value) {
      validate(fields()[5], value);
      this.height = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'height' field has been set.
      * This element is the customer height
      * @return True if the 'height' field has been set, false otherwise.
      */
    public boolean hasHeight() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'height' field.
      * This element is the customer height
      * @return This builder.
      */
    public com.davtor.avro.Customer.Builder clearHeight() {
      height = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Customer build() {
      try {
        Customer record = new Customer();
        record.customerId = fieldSetFlags()[0] ? this.customerId : (java.lang.String) defaultValue(fields()[0]);
        record.name = fieldSetFlags()[1] ? this.name : (java.lang.String) defaultValue(fields()[1]);
        record.lastName = fieldSetFlags()[2] ? this.lastName : (java.lang.String) defaultValue(fields()[2]);
        record.birthDate = fieldSetFlags()[3] ? this.birthDate : (java.lang.String) defaultValue(fields()[3]);
        record.weight = fieldSetFlags()[4] ? this.weight : (java.lang.Double) defaultValue(fields()[4]);
        record.height = fieldSetFlags()[5] ? this.height : (java.lang.Double) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Customer>
    WRITER$ = (org.apache.avro.io.DatumWriter<Customer>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Customer>
    READER$ = (org.apache.avro.io.DatumReader<Customer>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.customerId == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.customerId);
    }

    if (this.name == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.name);
    }

    if (this.lastName == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.lastName);
    }

    if (this.birthDate == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.birthDate);
    }

    if (this.weight == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeDouble(this.weight);
    }

    if (this.height == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeDouble(this.height);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.customerId = null;
      } else {
        this.customerId = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.name = null;
      } else {
        this.name = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.lastName = null;
      } else {
        this.lastName = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.birthDate = null;
      } else {
        this.birthDate = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.weight = null;
      } else {
        this.weight = in.readDouble();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.height = null;
      } else {
        this.height = in.readDouble();
      }

    } else {
      for (int i = 0; i < 6; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.customerId = null;
          } else {
            this.customerId = in.readString();
          }
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.name = null;
          } else {
            this.name = in.readString();
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.lastName = null;
          } else {
            this.lastName = in.readString();
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.birthDate = null;
          } else {
            this.birthDate = in.readString();
          }
          break;

        case 4:
          if (in.readIndex() != 1) {
            in.readNull();
            this.weight = null;
          } else {
            this.weight = in.readDouble();
          }
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.height = null;
          } else {
            this.height = in.readDouble();
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










